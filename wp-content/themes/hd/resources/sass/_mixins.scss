@use "sass:list";
@use "sass:math";

/** */
@mixin not-xxdesktop {
    @media (max-width: #{$xxdesktop-width - fs(0.2)}) {
        /*1536px*/
        @content;
    }
}

@mixin not-xdesktop {
    @media (max-width: #{$xdesktop-width - fs(0.2)}) {
        /*1200px*/
        @content;
    }
}

@mixin not-desktop {
    @media (max-width: #{$desktop-width - fs(0.2)}) {
        /*1025px*/
        @content;
    }
}

@mixin wp-mobile {
    @media (max-width: #{$wp-mobile-width - fs(0.2)}) {
        /*782px*/
        @content;
    }
}

@mixin mobile {
    @media (max-width: #{$mobile-width - fs(0.2)}) {
        /*640px*/
        @content;
    }
}

@mixin wp-mobile-small {
    @media (max-width: #{$wp-mobile-small-width}) {
        /*600px*/
        @content;
    }
}

@mixin mobile-portrait {
    @media (max-width: #{$mobile-width - fs(0.2)}) and (orientation: portrait) {
        @content;
    }
}

@mixin mobile-landscape {
    @media (max-width: #{$mobile-width - fs(0.2)}) and (orientation: landscape) {
        @content;
    }
}

@mixin not-mobile {
    @media (min-width: #{$mobile-width}) {
        /*640px*/
        @content;
    }
}

@mixin tablet {
    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - fs(0.2)}) {
        @content;
    }
}

@mixin wp-desktop {
    @media (min-width: #{$wp-mobile-width + fs(1)}) {
        /*783px*/
        @content;
    }
}

@mixin desktop {
    @media (min-width: #{$desktop-width}) {
        /*1024px*/
        @content;
    }
}

@mixin xdesktop {
    @media (min-width: #{$xdesktop-width}) {
        /*1200px*/
        @content;
    }
}

@mixin xxdesktop {
    @media (min-width: #{$xxdesktop-width}) {
        /*1536px*/
        @content;
    }
}

/** */
@mixin media-max($width: #{$wp-mobile-width}) {
    @include media-max-width($width);
}

@mixin media-min($width: #{$desktop-width}) {
    @include media-min-width($width);
}

/** */
@mixin media-max-width($width: #{$wp-mobile-width}) {
    @media (max-width: #{$width}) {
        @content;
    }
}

@mixin media-min-width($width: #{$desktop-width}) {
    @media (min-width: #{$width}) {
        @content;
    }
}

/** */
@mixin media-widget($d: 100, $t: false, $m: false) {
    @if (is-int($d) or $d == 0) {
        width: fs($d);
    }
    @if (is-int($t) or $t == 0) {
        @include not-desktop {
            width: fs($t);
        }
    }
    @if (is-int($m) or $m == 0) {
        @include mobile {
            width: fs($m);
        }
    }
}

@mixin media-height($d: 100, $t: false, $m: false) {
    @if (is-int($d) or $d == 0) {
        height: fs($d);
    }
    @if (is-int($t) or $t == 0) {
        @include not-desktop {
            height: fs($t);
        }
    }
    @if (is-int($m) or $m == 0) {
        @include mobile {
            height: fs($m);
        }
    }
}

@mixin media-gap($d: 30, $t: false, $m: false) {
    @if (is-int($d) or $d == 0) {
        gap: fs($d);
    }
    @if (is-int($t) or $t == 0) {
        @include not-desktop {
            gap: fs($t);
        }
    }
    @if (is-int($m) or $m == 0) {
        @include mobile {
            gap: fs($m);
        }
    }
}

@mixin media-padding($d: 30, $t: false, $m: false) {
    @include media-pt($d, $t, $m);
    @include media-pb($d, $t, $m);
}

@mixin media-margin($d: 30, $t: false, $m: false) {
    @include media-mt($d, $t, $m);
    @include media-mb($d, $t, $m);
}

@mixin media-margin2($d: 30, $t: false, $m: false) {
    @if (is-int($d) or $d == 0) {
        margin: fs($d);
    }
    @if (is-int($t) or $t == 0) {
        @include not-desktop {
            margin: fs($t);
        }
    }
    @if (is-int($m) or $m == 0) {
        @include mobile {
            margin: fs($m);
        }
    }
}

@mixin media-padding2($d: 30, $t: false, $m: false) {
    @if (is-int($d) or $d == 0) {
        padding: fs($d);
    }
    @if (is-int($t) or $t == 0) {
        @include not-desktop {
            padding: fs($t);
        }
    }
    @if (is-int($m) or $m == 0) {
        @include mobile {
            padding: fs($m);
        }
    }
}

@mixin media-pt($d: 30, $t: false, $m: false) {
    @if (is-int($d) or $d == 0) {
        padding-top: fs($d);
    }
    @if (is-int($t) or $t == 0) {
        @include not-desktop {
            padding-top: fs($t);
        }
    }
    @if (is-int($m) or $m == 0) {
        @include mobile {
            padding-top: fs($m);
        }
    }
}

@mixin media-pb($d: 30, $t: false, $m: false) {
    @if (is-int($d) or $d == 0) {
        padding-bottom: fs($d);
    }
    @if (is-int($t) or $t == 0) {
        @include not-desktop {
            padding-bottom: fs($t);
        }
    }
    @if (is-int($m) or $m == 0) {
        @include mobile {
            padding-bottom: fs($m);
        }
    }
}

@mixin media-mt($d: 30, $t: false, $m: false) {
    @if (is-int($d) or $d == 0) {
        margin-top: fs($d);
    }
    @if (is-int($t) or $t == 0) {
        @include not-desktop {
            margin-top: fs($t);
        }
    }
    @if (is-int($m) or $m == 0) {
        @include mobile {
            margin-top: fs($m);
        }
    }
}

@mixin media-mb($d: 30, $t: false, $m: false) {
    @if (is-int($d) or $d == 0) {
        margin-bottom: fs($d);
    }
    @if (is-int($t) or $t == 0) {
        @include not-desktop {
            margin-bottom: fs($t);
        }
    }
    @if (is-int($m) or $m == 0) {
        @include mobile {
            margin-bottom: fs($m);
        }
    }
}

/** */
@mixin fs-heading($heading: h1) {
    @include font-size-heading($heading);
}

@mixin font-size-heading($heading: h1) {
    font-size: fs(map-get($header-styles-small, $heading));
    @include not-mobile {
        font-size: fs(map-get($header-styles-medium, $heading));
    }
}

@mixin _webkit-scrollbar($width: 4, $height: $width) {
    &::-webkit-scrollbar {
        height: fs($height);
        width: fs($width);
    }
}

@mixin _placeholder($color: $gray) {
    &::placeholder {
        color: $color;
    }
}

@mixin _webkit-scrollbar-track($bg_color: $light-gray) {
    &::-webkit-scrollbar-track {
        background-color: $bg_color;
    }
}

@mixin _webkit-scrollbar-thumb($bg_color: $gray) {
    &::-webkit-scrollbar-thumb {
        background-color: $bg_color;
    }
}

/** */
@mixin responsive-bg-ratio($image-width: 204, $image-height: 81) {
    background-size: cover;
    background-position: center;
    //aspect-ratio: list.slash($image-width, $image-height);;
    display: block;
    height: 0;
    padding-bottom: percentage(math.div($image-height, $image-width));
}

@mixin responsive-wrapper($width: 100%) {
    position: relative;
    display: block;
    overflow: hidden;
    transition: all 0.3s ease-in-out;
    width: $width;
    & > img {
        display: block;
        height: 100% !important;
        width: auto;
        min-width: 100%;
        max-width: unset;
        object-fit: cover;
        object-position: center;
        @include centering-elements;
    }
}

@mixin responsive-scale($scale: 1.06, $opacity: 0.9) {
    transform: scale(1.0001);
    will-change: transform;
    transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s;
    &:hover {
        transform: scale($scale);
        opacity: $opacity;
    }
}

@mixin responsive-image-auto {
    height: auto !important;
    width: auto !important;
    object-fit: contain;
    max-width: 100%;
    max-height: 100%;
    min-width: 80%;
    min-height: 80%;
}

@mixin responsive-ratio($ratio-width: 3, $ratio-height: 2, $width: 100%) {
    //aspect-ratio: list.slash($ratio-width, $ratio-height);
    height: 0;
    padding-bottom: #{math.div($width * $ratio-height, $ratio-width)};
}

/** */
@mixin linear-gradient($angle: 135deg, $c: $color1, $amount: 12%) {
    background: linear-gradient($angle, $c 0%, adjust-hue($c, $amount) 100%);
}

@mixin linear-gradient2($angle: 90deg, $c1: $color2, $c2: $c1) {
    background: linear-gradient($angle, $c1 0%, $c2 100%);
}

@mixin gradient-text($angle: 135deg, $c: $color1, $amount: 10deg) {
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;
    background: linear-gradient($angle, $c, adjust-hue($c, $amount));
    color: $c;
    display: inline-block;
}

@mixin gradient-text2($angle: 135deg, $c1: $color1, $c2: $color2) {
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;
    background-image: linear-gradient(158deg, $c1 0%, $c2 100%);
    color: transparent;
    display: inline-block;
}

/** */
@mixin box($width: 300, $height: $width) {
    width: fs($width);
    height: fs($height);
}

@mixin box2($width: 300px, $height: $width) {
    @include box($width, $height);
}

@mixin clearfix {
    &::after,
    &::before {
        display: table;
        content: "";
    }
    &::after {
        clear: both;
    }
}

@mixin centering-elements($horizontal: true, $vertical: true, $position_absolute: true) {
    @if ($position_absolute == true) {
        position: absolute;
    } @else {
        position: relative;
    }

    @if $horizontal and $vertical {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    } @else if $horizontal {
        left: 50%;
        transform: translate(-50%, 0);
    } @else if $vertical {
        top: 50%;
        transform: translate(0, -50%);
    }
}

@mixin centering-elements2($width: 300, $height: $width) {
    @include box($width, $height);
    position: absolute;
    top: calc(50% - #{fs(math.div($height, 2))});
    left: calc(50% - #{fs(math.div($width, 2))});
}

@mixin absolute-full {
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    position: absolute;
}

@mixin fixed-full {
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    position: fixed;
}

/** */
/** */
@mixin grid-gap2($d: 1, $t: 0, $m: 0, $gap: 30, $gap_m: 20) {
    @include grid-gap($gap, $gap_m);
    & > .cell {
        @include grid-column2($d, $t, $m, $gap, $gap_m);
    }
}

@mixin grid-gutter2($d: 1, $t: 0, $m: 0, $gap: 15, $gap_m: 10) {
    @include grid-gutter($gap, $gap_m);
    & > .cell {
        @if ($d > 0) {
            @include desktop {
                width: percentage(math.div(1, $d));
            }
        }
        @if ($t > 0) {
            @include not-desktop {
                width: percentage(math.div(1, $t));
            }
        }
        @if ($m > 0) {
            @include mobile {
                width: percentage(math.div(1, $m));
            }
        }
    }
}

@mixin grid-column2($d: 1, $t: 0, $m: 0, $gap: 0, $gap_mobile: 0) {
    @include grid-column($d, $gap);
    @if ($t > 0) {
        @include not-desktop {
            @include grid-column($t, $gap);
        }
    }
    @if ($m > 0) {
        @include mobile {
            @if ($gap_mobile < 1) {
                @include grid-column($m, $gap);
            } @else {
                @include grid-column($m, $gap_mobile);
            }
        }
    }
}

/** */
/** */
@mixin grid-gap($d: 30, $m: 20) {
    gap: fs($d);
    @if ($m > 0) {
        @include mobile {
            gap: fs($m);
        }
    }
}

@mixin grid-column($n: 1, $gap: 0) {
    @if ($gap <= 0) {
        @if ($n < 1) {
            flex: 0 0 percentage($n);
            max-width: percentage($n);
        } @else {
            flex: 0 0 percentage(math.div(1, $n));
            max-width: percentage(math.div(1, $n));
        }
    } @else {
        @if ($n < 1) {
            flex: 0 0 percentage($n);
            max-width: percentage($n);
        } @else if ($n == 1) {
            flex: 0 0 percentage(math.div(1, $n));
            max-width: percentage(math.div(1, $n));
        } @else {
            flex: 0 0 calc(#{percentage(math.div(1, $n))} - #{fs(($n - 1) * math.div($gap, $n))});
            max-width: calc(#{percentage(math.div(1, $n))} - #{fs(($n - 1) * math.div($gap, $n))});
        }
    }
}

@mixin grid-self($n: 1, $self_n: 1, $gap: 0) {
    @if ($n > 0 and $n == $self_n) {
        flex: 0 0 percentage(1);
        max-width: percentage(1);
    }
    @else if ($gap <= 0 and $self_n > 0 and $n > $self_n) {
        flex: 0 0 calc(#{percentage(math.div($self_n, $n))});
        max-width: calc(#{percentage(math.div($self_n, $n))});
    }
    @else if ($self_n > 0 and $n > $self_n and $gap > 0) {
        flex: 0 0 calc(#{percentage(math.div($self_n, $n))} - #{fs(($n - $self_n) * math.div($gap, $n))});
        max-width: calc(#{percentage(math.div($self_n, $n))} - #{fs(($n - $self_n) * math.div($gap, $n))});
    }
}

@mixin width-column($n: 1, $gap: 0) {
    @if ($gap <= 0) {
        @if ($n < 1) {
            width: percentage($n);
        } @else {
            width: percentage(math.div(1, $n));
        }
    } @else {
        @if ($n < 1) {
            width: percentage($n);
        } @else if ($n == 1) {
            width: percentage(math.div(1, $n));
        } @else {
            width: calc(#{percentage(math.div(1, $n))} - #{fs(($n - 1) * math.div($gap, $n))});
        }
    }
}

@mixin max-width-column($n: 1, $gap: 0) {
    @if ($gap <= 0) {
        @if ($n < 1) {
            max-width: percentage($n);
        } @else {
            max-width: percentage(math.div(1, $n));
        }
    } @else {
        @if ($n < 1) {
            max-width: percentage($n);
        } @else if ($n == 1) {
            max-width: percentage(math.div(1, $n));
        } @else {
            max-width: calc(#{percentage(math.div(1, $n))} - #{fs(($n - 1) * math.div($gap, $n))});
        }
    }
}

/** */
@mixin grid-gutter($gap: 15, $gap_m: 10) {
    @include mx-gutter($gap, $gap_m);
    & > .cell {
        @include px-gutter($gap, $gap_m);
    }
}

@mixin mx-gutter($gap: 15, $mobile_gap: 10) {
    margin-left: -#{fs($gap)};
    margin-right: -#{fs($gap)};
    @if ($mobile_gap > 0) {
        @include mobile {
            margin-left: -#{fs($mobile_gap)};
            margin-right: -#{fs($mobile_gap)};
        }
    }
}

@mixin px-gutter($gap: 30, $mobile_gap: 20) {
    padding-left: #{fs($gap)};
    padding-right: #{fs($gap)};
    @if ($mobile_gap > 0) {
        @include mobile {
            padding-left: #{fs($mobile_gap)};
            padding-right: #{fs($mobile_gap)};
        }
    }
}

@mixin gutter-vertical-container($gap: 30, $mobile_gap: 20) {
    @if ($mobile_gap > 0) {
        margin-top: -#{fs(math.div($mobile_gap, 2))};
        margin-bottom: -#{fs(math.div($mobile_gap, 2))};
        @include not-mobile {
            margin-top: -#{fs(math.div($gap, 2))};
            margin-bottom: -#{fs(math.div($gap, 2))};
        }
        & > .cell {
            padding-top: fs(math.div($mobile_gap, 2));
            padding-bottom: fs(math.div($mobile_gap, 2));
            @include not-mobile {
                padding-top: fs(math.div($gap, 2));
                padding-bottom: fs(math.div($gap, 2));
            }
        }
    } @else {
        margin-top: -#{fs(math.div($gap, 2))} !important;
        margin-bottom: -#{fs(math.div($gap, 2))} !important;
        & > .cell {
            padding-top: fs(math.div($gap, 2)) !important;
            padding-bottom: fs(math.div($gap, 2)) !important;
        }
    }
}

@mixin gutter-container($gap: 30, $mobile_gap: 20) {
    @if ($mobile_gap > 0) {
        margin-left: -#{fs(math.div($mobile_gap, 2))};
        margin-right: -#{fs(math.div($mobile_gap, 2))};
        @include not-mobile {
            margin-left: -#{fs(math.div($gap, 2))};
            margin-right: -#{fs(math.div($gap, 2))};
        }
        & > .cell {
            padding-left: fs(math.div($mobile_gap, 2));
            padding-right: fs(math.div($mobile_gap, 2));
            @include not-mobile {
                padding-right: fs(math.div($gap, 2));
                padding-left: fs(math.div($gap, 2));
            }
        }
    } @else {
        margin-left: -#{fs(math.div($gap, 2))} !important;
        margin-right: -#{fs(math.div($gap, 2))} !important;
        & > .cell {
            padding-right: fs(math.div($gap, 2)) !important;
            padding-left: fs(math.div($gap, 2)) !important;
        }
    }
}

/** */
@mixin line-clamp($n: 2) {
    @include webkit-line-clamp($n);
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin webkit-line-clamp($n: 2) {
    -webkit-line-clamp: $n;
    display: -webkit-box;
    -webkit-box-orient: vertical;
}

@mixin after-overlay {
    position: relative;
    &::after {
        content: "";
        opacity: 0;
        @include absolute-full;
    }
}

@mixin gradient-animation {
    background-size: 500% 500%;
    animation: gradient-animation 30s ease infinite;
}

@mixin image-animation {
    animation: image-animation 30s ease infinite;
    backface-visibility: hidden;
}

@mixin image-animation2 {
    animation: image-animation2 30s ease infinite;
    backface-visibility: hidden;
}

/** */
@mixin left-position($padding: 15, $padding_m: 10, $extra_width: false) {
    left: calc(50vw - #{math.div($global-width, 2)} + #{fs($padding)});
    @include not-xxdesktop {
        left: calc(50vw - #{math.div($global-width-medium, 2)} + #{fs($padding)});
    }
    @include mobile {
        left: calc(50vw - #{math.div($mobile-width, 2)} + #{fs($padding_m)});
    }

    @if($extra_width == true) {
        @include xxdesktop {
            left: calc(50vw - #{math.div($global-width-extra, 2)} + #{fs($padding)});
        }
    }

    &.width-extra {
        @include xxdesktop {
            left: calc(50vw - #{math.div($global-width-extra, 2)} + #{fs($padding)});
        }
    }
}

@mixin right-position($padding: 15, $padding_m: 10, $extra_width: false) {
    right: calc(50vw - #{math.div($global-width, 2)} + #{fs($padding)});
    @include not-xxdesktop {
        right: calc(50vw - #{math.div($global-width-medium, 2)} + #{fs($padding)});
    }
    @include mobile {
        right: calc(50vw - #{math.div($mobile-width, 2)} + #{fs($padding_m)});
    }

    @if($extra_width == true) {
        @include xxdesktop {
            right: calc(50vw - #{math.div($global-width-extra, 2)} + #{fs($padding)});
        }
    }

    &.width-extra {
        @include xxdesktop {
            right: calc(50vw - #{math.div($global-width-extra, 2)} + #{fs($padding)});
        }
    }
}

/** */
@mixin left-padding($padding: 15, $padding_m: 10, $extra_width: false) {
    padding-left: calc(50vw - #{math.div($global-width, 2)} + #{fs($padding)});
    @include not-xxdesktop {
        padding-left: calc(50vw - #{math.div($global-width-medium, 2)} + #{fs($padding)});
    }
    @include mobile {
        padding-left: calc(50vw - #{math.div($mobile-width, 2)} + #{fs($padding_m)});
    }

    @if($extra_width == true) {
        @include xxdesktop {
            padding-left: calc(50vw - #{math.div($global-width-extra, 2)} + #{fs($padding)});
        }
    }

    &.width-extra {
        @include xxdesktop {
            padding-left: calc(50vw - #{math.div($global-width-extra, 2)} + #{fs($padding)});
        }
    }
}

/** */
@mixin right-padding($padding: 15, $padding_m: 10, $extra_width: false) {
    padding-right: calc(50vw - #{math.div($global-width, 2)} + #{fs($padding)});
    @include not-xxdesktop {
        padding-right: calc(50vw - #{math.div($global-width-medium, 2)} + #{fs($padding)});
    }
    @include mobile {
        padding-right: calc(50vw - #{math.div($mobile-width, 2)} + #{fs($padding_m)});
    }

    @if($extra_width == true) {
        @include xxdesktop {
            padding-right: calc(50vw - #{math.div($global-width-extra, 2)} + #{fs($padding)});
        }
    }

    &.width-extra {
        @include xxdesktop {
            padding-right: calc(50vw - #{math.div($global-width-extra, 2)} + #{fs($padding)});
        }
    }
}

/** */
@mixin right-fullwidth($padding: 15, $padding_m: 10, $extra_width: false) {
    margin: 0 0 0 auto;
    padding-left: fs($padding);
    max-width: calc(50% + #{math.div($global-width, 2)});
    @include not-xxdesktop {
        max-width: calc(50% + #{math.div($global-width-medium, 2)});
    }
    @include mobile {
        padding-left: fs($padding_m);
        max-width: calc(50% + #{math.div($mobile-width, 2)});
    }

    @if($extra_width == true) {
        @include xxdesktop {
            max-width: calc(50% + #{math.div($global-width-extra, 2)});
        }
    }

    &.width-extra {
        @include xxdesktop {
            max-width: calc(50% + #{math.div($global-width-extra, 2)});
        }
    }
}

@mixin left-fullwidth($padding: 15, $padding_m: 10, $extra_width: false) {
    margin: 0 auto 0 0;
    padding-right: fs($padding);
    max-width: calc(50% + #{math.div($global-width, 2)});
    @include not-xxdesktop {
        max-width: calc(50% + #{math.div($global-width-medium, 2)});
    }
    @include mobile {
        padding-right: fs($padding_m);
        max-width: calc(50% + #{math.div($mobile-width, 2)});
    }

    @if($extra_width == true) {
        @include xxdesktop {
            max-width: calc(50% + #{math.div($global-width-extra, 2)});
        }
    }

    &.width-extra {
        @include xxdesktop {
            max-width: calc(50% + #{math.div($global-width-extra, 2)});
        }
    }
}

@mixin grid-container($padding: 15, $padding_m: 10, $extra_width: false) {
    max-width: $global-width;
    @include not-xxdesktop {
        max-width: $global-width-medium;
    }
    margin-left: auto;
    margin-right: auto;
    padding-right: fs($padding_m);
    padding-left: fs($padding_m);
    @include not-mobile {
        padding-right: fs($padding);
        padding-left: fs($padding);
    }

    @if($extra_width == true) {
        @include xxdesktop {
            max-width: $global-width-extra;
        }
    }

    &.width-extra {
        @include xxdesktop {
            max-width: $global-width-extra;
        }
    }
}

@mixin container-width($padding: 30, $padding_m: 20, $extra_width: false) {
    max-width: calc($global-width - fs($padding));
    @include not-xxdesktop {
        max-width: calc($global-width-medium - fs($padding));
    }
    @include mobile {
        max-width: calc($global-width-small - fs($padding_m));
    }

    @if($extra_width == true) {
        @include xxdesktop {
            max-width: calc($global-width-extra - fs($padding));
        }
    }

    &.width-extra {
        @include xxdesktop {
            max-width: calc($global-width-extra - fs($padding));
        }
    }
}

@mixin cell {
    flex: 0 0 auto;
    min-height: 0;
    min-width: 0;
    width: 100%;
}

@mixin grid-padding-x {
    margin-left: -0.625rem;
    margin-right: -0.625rem;
    @include not-mobile {
        margin-left: -0.9375rem;
        margin-right: -0.9375rem;
    }
    & > .cell {
        padding-left: 0.625rem;
        padding-right: 0.625rem;
        @include not-mobile {
            padding-right: 0.9375rem;
            padding-left: 0.9375rem;
        }
    }
}

@mixin flex-align-center {
    display: flex;
    align-items: center;
}

@mixin flex-justify-center {
    display: flex;
    justify-content: center;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-shrink {
    flex: 0 0 auto;
    max-width: 100%;
}

@mixin flex-auto {
    flex: 1 1 0;
    min-width: 0;
}

@mixin hover_color($c1: $color1, $c2: $c1, $text-decoration: false) {
    color: $c1;
    &:hover {
        color: $c2;
        @if ($text-decoration == false) {
            text-decoration: none;
        } @else {
            text-decoration: underline;
        }
    }
}

@mixin hover_svg($c1: $color1, $c2: $c1) {
    fill: $c1;
    &:hover {
        fill: $c2;
    }
}

/** */
@mixin underline($color: $gray, $height: 1px, $width: 100%, $left: 0, $bottom: 0) {
    position: relative;
    display: inline-block;
    &::before {
        content: "";
        display: inline-block;
        width: $width;
        height: $height;
        position: absolute;
        bottom: $bottom;
        left: $left;
        background-color: $color;
        transform-origin: right center;
        transform: scaleX(0);
        transition: transform 0.2s cubic-bezier(1, 0, 0, 1);
    }
    &:hover {
        &::before {
            transform-origin: left center;
            transform: scaleX(1);
        }
    }
}

/** */
@mixin button-arrow($width: 16, $height: $width, $color: #fff) {
    overflow-wrap: break-word;
    &::after {
        content: '';
        display: inline-block;
        margin: 0 0 0 10px;
        @include box($width, $height);
        background-image: inline-svg('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" style="fill:#{$color};"><path d="m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z"></path></svg>');
        vertical-align: -10%;
    }
}

@mixin button-scale($scale: 0.98) {
    transition: all .3s ease-out .07s;
    &:hover {
        transition: all .3s ease-out .07s;
        transform: scale($scale);
    }
}

/** fontsize */
@mixin fs($font-size: 16) {
    font-size: fs($font-size);
}

@function fs($font-size: 16) {
    @return rem-calc($font-size);
}

/** Button hover effect*/
@mixin _effect1($c1: $black, $c2: $white) {
    box-shadow: 0 0 0 2.5em $c1 inset;
    background-color: transparent;
    transition: all 300ms ease;
    color: $c2;
    &:hover {
        box-shadow: 0 0 0 0 $c1 inset, 0 3px 10px rgb(0 0 0 / 30%);
        color: $c1;
        background-color: $c2;
    }
}

// Button hover effect
// http://el.commonsupport.com/newwp/autorex/services-2/
@mixin _effect2($border_radius: 0, $c: $black, $opacity_hover: 0.15) {
    position: relative;
    border-radius: fs($border_radius);
    &::before {
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 0;
        content: "";
        background-color: $c;
        transition: 0.5s;
        opacity: 0;
        border-radius: fs($border_radius);
    }
    &:hover {
        &::before {
            width: 100%;
            opacity: $opacity_hover;
        }
    }
}

// Image Hover Effect
// http://el.commonsupport.com/newwp/autorex/services-2/
@mixin _effect3($bg: rgba(255, 255, 255, 0.2), $border: 0) {
    position: relative;
    overflow: hidden;
    border-radius: $border;
    &::before {
        @include centering-elements;
        display: block;
        content: "";
        width: 0;
        height: 0;
        background: $bg;
        opacity: 0;
        z-index: 10;
        border-radius: $border;
    }
    &:hover {
        opacity: 1;
        &::before {
            animation: circle 0.75s;
        }
    }
}

/** functions to urlencode the svg string*/
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@function url-encode($string) {
    $map: (
            "%": "%25",
            "<": "%3C",
            ">": "%3E",
            " ": "%20",
            "!": "%21",
            "*": "%2A",
            "'": "%27",
            '"': "%22",
            "(": "%28",
            ")": "%29",
            ";": "%3B",
            ":": "%3A",
            "@": "%40",
            "&": "%26",
            "=": "%3D",
            "+": "%2B",
            "$": "%24",
            ",": "%2C",
            "/": "%2F",
            "?": "%3F",
            "#": "%23",
            "[": "%5B",
            "]": "%5D"
    );
    $new: $string;
    @each $search, $replace in $map {
        $new: str-replace($new, $search, $replace);
    }
    @return $new;
}

/** $string - svg */
@function inline-svg($string) {
    @return url('data:image/svg+xml;utf8,#{url-encode($string)}');
}

/** https://github.com/pentzzsolt/sass-is-int/blob/master/_is-int.scss */
@function is-int($value) {
    @if type-of($value) != number {
        /*@warn '`#{$value}` is not a valid number!';*/
        @return null;
    }
    @return round($value) == $value;
}